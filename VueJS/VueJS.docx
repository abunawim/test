Two way data binding using v-model


Example 01: The data floats both ways and updates its values.

<div id="app">
	<input type="text" v-model="name">
	<p><strong>Name: </strong>{{name}}</p>
</div>


<script>
	new Vue({
		el:'#app',
		data:{
			name: "",
			age:28,
		},
	});
</script>

N.B, if we set default value for name: "Bablu Ahmed" and in the input element like value=”Test” then Vue will ignore the field value with default data property.

Example 02: Modifiers for v-model directive.

Trim, Number (parse.int in js), 


	<div id="app">
		<input type="text" v-model.number="age">
		<p><strong>Name: </strong>{{name}}</p>
		<p><strong>Type: </strong> {{ typeof age }}</p>
	</div>

	<script>
		new Vue({
			el:'#app',
			data:{
				name: "Bablu Ahmed",
				age:28,
			},

		});
	</script>


Example 03: The lazy modifier update data value after the whole thing is written like jquery change event

<div id="app">
		<input type="text" v-model.number.lazy="age">
		<p><strong>Name: </strong>{{age}}</p>
		<p><strong>Type: </strong> {{ typeof age }}</p>
	</div>

	<script>
		new Vue({
			el:'#app',
			data:{
				name: "Bablu Ahmed",
				age:28,
			},

		});
	</script>




Outputting HTML Elements


For xss (Cross Site Security) and loading time consuming we need to render HTML by default it doesn’t encoded if include v-html then it shows as usual.

For example 01:

<div id="app">
		<div v-html="html"></div>
	</div>

	<script>
		new Vue({
			el:'#app',
			data:{
				html: "<h1>Bablu Ahmed</h1>",
			},

		});
	</script>

N.B, Below code will not work

<div id="app">
	{{ html }}
</div>


Example 02: Outputting HTML elements only one time or just it will show initial data and never be changed anymore.

<div id="app">
		<h1 v-once>{{ title }}</h1>
		<button v-on:click="title = 'Amar sonar Bangla'">Update once </button>
	</div>

	<script>
		new Vue({
			el:'#app',
			data:{
				title: "What is Vue JS?",
			},

		});
	</script>



Conditionally Rendering Elements

if, else if, and else statement 

Example 01:


	<div id="app">
		<p v-if="itemsInStock > 10">{{itemsInStock}} in stock</p>
		<p v-else-if="itemsInStock > 0">Hurry up, there are just a few items left!</p>
		<p v-else>Too bad, we're all out!</p>
	</div>

	<script>
		new Vue({
			el:'#app',
			data:{
				itemsInStock: 0,
			},

		});
	</script>


Example 02: We can use <template></template> markup for multiple elements and the markup will not render in html.



	<div id="app">
		<p v-if="itemsInStock > 10">{{itemsInStock}} in stock</p>
		<p v-else-if="itemsInStock > 0">Hurry up, there are just a few items left!</p>
		<p v-else>Too bad, we're all out!</p>

		<template v-if="itemsInStock > 10">
			<p>special Offer!</p>
			<p>Looks like we have tons of products in stock...save 20% if you order now!</p>
		</template>
	</div>

	<script>
		new Vue({
			el:'#app',
			data:{
				itemsInStock: 15,
			},

		});
	</script>



Showing and Hiding Elements (Toggle)

Example 01:

	<div id="app">
		<p v-show="isBablu">Yes, I am Bablu</p>
		<p v-show="!isBablu">No, I am not Bablu</p>
		<button v-on:click="isBablu=!isBablu">Toggle</button>
	</div>

	<script>
		new Vue({
			el:'#app',
			data:{
				isBablu: true,
			},

		});
	</script>



Hiding Elements until until the Vue instance is Ready



<style>
		[v-cloak]{
			display: none;
		}
	</style>
	<div id="app">
		<p v-cloak>{{ message }}</p>
	</div>

	<script>
		setTimeout(function() {
			new Vue({
				el:'#app',
				data:{
					message: "Hi, I am Bablu Ahmed",
				},

			});
		}, 5000);
	</script>








Looping through Elements

Arrays:
<div id="app">
		<h2>Songs</h2>
		<ul>
			<li v-for="title in songTitles">{{title}}</li>
		</ul>
	</div>

<script>
		new Vue({
			el:'#app',
			data:{
				songTitles: ['Jhoom','Jhor','Jol'],
				employees: [
					{"name":"Bablu Ahmed", "title":"Programmer"},
					{"name":"Abdul Kuddus", "title":"Vue JS Expert"},
					{"name":"Sakibur Rahman", "title":"Marketing Manager"},
				],
				companyName: "w3public.com",
			},

		});
	</script>


Objects:
<div id="app">
		<h2>Empployee Details</h2>
		<table>
			<tr>
				<th>Name</th>
				<th>Title</th>
				<th>Company</th>
			</tr>
			<tr v-for="employee in employees">
				<td>{{employee.name}}</td>
				<td>{{employee.title}}</td>
				<td>{{companyName}}</td>
			</tr>
		</table>
	</div>


Accessing Loop index:

<tr v-for="(employee, index) in employees">
				<td>{{employee.name}}</td>
				<td>{{employee.title}}</td>
				<td>{{companyName}}</td>
				<td>{{index}}</td>
			</tr>

Looping through object properties:

<div id="app">
		<h2>Empployee Details</h2>
		<ul>
			<li v-for="(value, property, index) in person">{{property}}:			{{value}}({{index}})</li>
		</ul>
	</div>

<script>
		new Vue({
			el:'#app',
			data:{
				songTitles: ['Jhoom','Jhor','Jol'],
				person: {"name":"Bablu Ahmed", "title":"Programmer"},
				companyName: "w3public.com",
			},

		});
	</script>
 


Looping through number ranges:

<ul>
	<li v-for="n in 10">{{n}}</li>
</ul>

With index:

<li v-for="(n, index) in 10">
	{{n}}*{{index}} = {{n*index}}
</li>

Output:
1*0 = 0
2*1 = 2
3*2 = 6
4*3 = 12
5*4 = 20
6*5 = 30
7*6 = 42
8*7 = 56
9*8 = 72
10*9 = 90


Array: By default Vue doesn’t change any array value, if needed we have to change using Vue.set() method.

<ul>
	<li v-for="(array, index) in numbers">
		{{array}}
	</li>
</ul>
<button v-on:click="changeNumber">Change Number</button>

<script>
		new Vue({
			el:'#app',
			data:{
				numbers: [1,2,3,4],
			},

			methods:{
				changeNumber: function () {
					Vue.set(this.numbers, 1, 10);
					alert(this.numbers[1]);
				}
			},

		});
	</script> 


Computed Properties: Computed properties are also function but when we will use it doesn’t need parenthesis. We can optimize performance using computed properties. This is because it doesn’t change a value of the dada until change it with new value.

For example:

<p>{{getFullname()}}</p>
<p>{{counter}}</p>
<button v-on:click="counter++">Full Name</button>

<script>
		new Vue({
			el:'#app',
			data:{
				counter:1,
				firstName:"Bablu",
				lastName:"Ahmed",
			},

			methods:{
				getFullname: function () {
					alert("Assembling fullname...");
					return this.firstName+" "+this.lastName;
				}
			},

		});
	</script>


In above code, we can see the same code is executing again and again in every single click although the value is not change of the data property.

We can solve it by using computed property as follows:

<p>{{getFullName}}</p>
<p>{{counter}}</p>
<button v-on:click="counter++">Full Name</button>


<script>
		new Vue({
			el:'#app',
			data:{
				counter:1,
				firstName:"Bablu",
				lastName:"Ahmed",
			},

			computed:{
				getFullName: function () {
					alert("Assembling fullname...");
					return this.firstName+" "+this.lastName;
				}
			},

		});
	</script>


Here, we can see that the value of farstName and lastName is not been changed and hence the alert is not showing and the of counter is been changed and it is showing.



Character Length length checking Application

<div id="app">
	<!--two-way data binding to update the value of data-->
	<input v-model="password" type="password"> 
	<p v-if="password.length > 6">Awesome! Your password is longer than 6 characters</p>
	<p v-else-if="password.length > 0">Please enter a longer password</p>
	<p v-else>Enter a password</p>
	
</div>

<script>
		new Vue({
			el:'#app',
			data:{
				password:'',
			},

		});
	</script>


Categories and Sub Categories Displaying Project

<div id="app">
		<ol>
			<li v-for="proLanguage in proLanguages">
				{{proLanguage.category}}
				<ul>
					<li v-for="sub in proLanguage.subCat">
						{{sub}}
					</li>
				</ul>
			</li>
		</ol>
	</div>

	
	<script>
		new Vue({
			el:'#app',
			data:{
				proLanguages:[
					{category: "Javascript", subCat: ["Vue JS","React JS", "Angular2 JS"]},
					{category: "Databases", subCat: ["MySQL","PostgreSQL", "MariaDB"]}
				]
			},

		});
	</script>






