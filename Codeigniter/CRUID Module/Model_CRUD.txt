	//v.01
	//CRUD Oparation
    //Insert
    public function save($table, $data){
        $this->db->insert($table, $data);
        return $this->db->insert_id();
    }

    //update
    public function update($table, $id, $data)
    {
        $updated_status = $this->db->update($table, $data, array('id' => $id));
        if($updated_status):
            return $id;
        else:
            return false;
        endif;
    }
    
    //delete
    public function delete($table, $fld, $id)
    {
        $this->db->delete($table, array($fld => $id));
        return $this->db->affected_rows();
    }

    /*
     * Read
     */
    //Find all
    public function FindAll($table)
    {
        $this->db->select('*');
        $this->db->from($table);
        $this->db->order_by("id", "desc");
        $query = $this->db->get();
        return $query->result();
    }
    //Find by id
    public function FindById($table, $id)
    {
        $this->db->select('*');
        $this->db->from($table);
        $this->db->where('id', $id);
        $query = $this->db->get();
        return $query->row();
    }
    // Find All by Limit
    public function FindAllByLimit($table, $limit='', $offset='') {
        $this->db->select('*');
        $this->db->order_by('id', 'DESC');
        $this->db->from($table);
        $this->db->limit($limit, $offset);
        $query = $this->db->get();
        return $query->result();
    }
    // Find by ID & Limit
    public function FindByIdAndLimit($table, $id='', $limit='', $offset='') {
        $this->db->select('*');
        $this->db->order_by('id', 'DESC');
        $this->db->from($table);
        $this->db->limit($limit, $offset);
        $this->db->where(array('id' => $id));
        $query = $this->db->get();
        return $query->result();
    }
//End CRUD Oparation



//v.02
    //CRUD Operation
    //Insert
    public function save($table, $data){
        $this->db->insert($table, $data);
        return $this->db->insert_id();
    }
    //Batch Insert
    public function saveByBatch($table, $batch){
        return $this->db->insert_batch($table, $batch);
    }
        
    //update single row
    public function update($table, $fld, $id, $data)
    {
        $updated_status = $this->db->update($table, $data, array($fld => $id));

        if($updated_status):
            return $id;
        else:
            return false;
        endif;
    }
   //update2 for multi update
    public function update2($table, $data, $where)
    {
        return $this->db->update($table, $data, $where);
    }

    //Batch Update
    public function updateByBatch($table, $fld, $batch){
        return $this->db->update_batch($table, $batch, $fld);
    }
    //Update Previous or Last Row
    public function updateLastRow($table, $fld, $where, $data){
        $this->db->order_by($fld, "desc");
        $this->db->limit(1);
        $this->db->where($where);
        $this->db->update($table, $data);
    }
    //delete
    public function delete($table, $where)
    {
        return $this->db->delete($table, array($where));
    }
    //Find all
    public function findAll($table, $fld='')
    {
        $this->db->select('*');
        $this->db->from($table);
        $this->db->order_by($fld, "desc");
        $query = $this->db->get();
        return $query->result();
    }
    //Find all by asc
    public function findAllByAsc($table, $fld)
    {
        $this->db->select('*');
        $this->db->from($table);
        $this->db->order_by($fld, "asc");
        $query = $this->db->get();
        return $query->result();
    }
   //Find Row by ID
    function findRowById($tableName, $attribute, $value)
    {
        return $this->db->query("SELECT * FROM $tableName WHERE $attribute = '$value'")->row();
    }
    //Find Result by ID
    public function findById($table, $fld, $id)
    {
        $this->db->select('*');
        $this->db->from($table);
        $this->db->where($fld, $id);
        $query = $this->db->get();
        return $query->result();
    }

    // Find All by Limit
    public function findAllByLimit($table, $fld, $limit='', $offset='') {
        $this->db->select('*');
        $this->db->order_by($fld, 'DESC');
        $this->db->from($table);
        $this->db->limit($limit, $offset);
        $query = $this->db->get();
        return $query->result();
    }
     // Find by ID & Limit
    public function findByIdAndLimit($table, $fld, $id='', $limit='', $offset='') {
        $this->db->select('*');
        $this->db->order_by($fld, 'DESC');
        $this->db->from($table);
        $this->db->limit($limit, $offset);
        $this->db->where(array($fld => $id));
        $query = $this->db->get();
        return $query->result();
    }

    // Find by multiple && condition
    public function findByAndWhere($table, $where) {
        $this->db->select('*');
        $this->db->from($table);
        $this->db->where($where);
        $query = $this->db->get();
        return $query->result();
    }

    // Find by multiple && with || condition
    public function findByOrWhere($table, $where, $or_where) {
        $this->db->select('*');
        $this->db->from($table);
        $this->db->where($where);
        $this->db->or_where($or_where);
        $query = $this->db->get();
        return $query->result();
    }
    
    //Find By Left Join using tow Tables
    function findByLeftJoinT2($table1, $table2, $t2attr, $t1id, $where=array(), $group_by_id='', $order_by_id='')
    {
        $this->db->select("t1.*,t2.*");
        $this->db->from($table1." t1");
        $this->db->join($table2." t2", "t2.".$t2attr." = t1.".$t1id,'left');
        $this->db->where($where);
        $this->db->group_by('t1.'.$group_by_id);
        $this->db->order_by('t1.'.$order_by_id, "DESC");
        $query = $this->db->get();
        return $query->result();
    }
    
    //Find By Left Join using tow Tables
    function findByLeftJoinT2($table1, $table2, $t2_attr, $t1_attr, $where) //$where = " where t2.EXP_ID = '$id'";
    {
        //First select id attribute name
        $query = $this->db->get($table1); //details table
        $row = array_keys($query->row_array());
        $id_attr = $row[0];

        //Do query
        return $this->db->query("
            SELECT DISTINCT t1.$id_attr, t1.*, t2.* FROM " .$table1. " t1 LEFT JOIN " .$table2. " t2 ON t2." .$t2_attr. " = t1." .$t1_attr. "$where
        ")->result();
    }
    //End CRUD Operation

















