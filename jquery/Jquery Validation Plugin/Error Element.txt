//V.01, errorLabelContainer
jQuery(function($) {
  var validator = $('#form').validate({
    rules: {
      first: {
        required: true
      },
      second: {
        required: true
      }
    },
    messages: {},
    errorElement : 'div',
    errorLabelContainer: '.errorTxt'
  });
});
.errorTxt{
  border: 1px solid red;
  min-height: 20px;
}


//v.02, jquery validation show error message only after user leaves field (leaves the field)
$('#beta_signup_form').validate({
    rules: {

    },
    focusCleanup: true,
    onkeyup: false,


//v.03
 errorPlacement: function(error, element) {
            element.val(error.text());
        }

//v.04
errorPlacement: function(error, element) {
    element.attr("placeholder", error.text());
}

//v.05
$('#frm').validate({
	  rules: {
	    kimliktipi: "required",
	    kimlikserino: "required",
	    cinsiyet: "required"
	  },
	  ignore: ':hidden:not(".multiselect")',

	  highlight: function(element) {
	    $(element).closest('.form-group').addClass('has-error');
	  },
	  unhighlight: function(element) {
	    $(element).closest('.form-group').removeClass('has-error');
	  },
	  errorElement: 'span',
	  errorClass: 'help-block small',
	  errorPlacement: function(error, element) {
	    if (element.hasClass('multiselect')) {
	      error.insertAfter(element.next('.btn-group'));
	    } else {
	      error.insertAfter(element);
	    }
	  },
	  submitHandler: function() {
	    alert('valid form');
	    return false;
	  }
	});

//v.06, This is works
errorPlacement: function (error, element) {
            //check whether chosen plugin is initialized for the element
            if (element.data().chosen) { //or if (element.next().hasClass('chosen-container')) {
                element.next().after(error);
            } else {
                element.after(error);
            }
        }

//OR

errorPlacement: function (error, element) {
    //check whether chosen plugin is initialized for the element
    if (element.data().chosen) { //or if (element.next().hasClass('chosen-container')) {
        element.next().after(error);
    } else {
        element.after(error);
    }
}


//V.07, jQuery Validate - Two separate validations, one form
$(document).ready(function () {

    $('#myform').validate({  // initialize the plugin on your form
        // options, rules and/or callbacks
    });

    //  IMPORTANT:  buttons are NOT type="submit"

    $('#button1').on('click', function(){  // capture the click           
        $('#myfield').rules('add', {  // dynamically declare the rules
            required: true,
            email: true
        });
        $('#myOtherField').rules('remove'); // remove the other rules.
        // another '.rules()' call, etc.
        $('#myform').valid();  // trigger the validation & do NOT submit        
    }); 

    $('#button2').on('click', function(){  // capture the click
        $('#myOtherField').rules('add', {  // dynamically declare the rules
            required: true,
            digits: true
        });
        $('#myfield').rules('remove'); // remove the other rules.
        // another '.rules()' call, etc.
        $('#myform').submit();  // trigger the validation & submit     
    });

});

//OR
$('element').rules('remove', 'required');
 $('element').removeAttr('required');
//OR
$('input, select, textarea').each(function() {
    $(this).rules('remove', 'required');
});
//OR



Link: http://jsfiddle.net/Kt93M/

//V.08, If you want to call validate again with new settings on different button call
$('#formid').removeData('validator');





